--- src/glob.c.orig	2005-08-20 19:26:06.000000000 -0400
+++ src/glob.c	2012-08-04 23:32:45.000000000 -0400
@@ -32,26 +32,12 @@
 #define SYSNDIR
 #endif /* Xenix */
 
-#if defined (POSIX) || defined (DIRENT) || defined (__GNU_LIBRARY__)
+
 #include <dirent.h>
-#define direct dirent
-#define D_NAMLEN(d) strlen((d)->d_name)
-#else /* not POSIX or DIRENT or __GNU_LIBRARY__ */
-#define D_NAMLEN(d) ((d)->d_namlen)
-#ifdef USG
-#if defined (SYSNDIR)
-#include <sys/ndir.h>
-#else /* SYSNDIR */
-#include "ndir.h"
-#endif /* not SYSNDIR */
-#else /* not USG */
-#include <sys/dir.h>
-#endif /* USG */
-#endif /* POSIX or DIRENT or __GNU_LIBRARY__ */
-
-#ifdef __QNX__
-#define REAL_DIR_ENTRY(dp) (dp->d_stat.st_ino != 0)
-#elif defined (_POSIX_SOURCE)
+#define D_NAMLEN(d) ((d)->d_namelen)
+
+
+#if defined (_POSIX_SOURCE)
 /* Posix does not require that the d_ino field be present, and some
    systems do not provide it. */
 #define REAL_DIR_ENTRY(dp) 1
@@ -136,7 +122,7 @@
       case ']':
 	if (open)
 	  return 1;
-	continue;      
+	continue;
 
       case '\\':
 	if (*p++ == '\0')
@@ -327,7 +313,7 @@
   };
 
   DIR *d;
-  register struct direct *dp;
+  register struct dirent *dp;
   struct globval *lastlink;
   register struct globval *nextlink;
   register char *nextname;
@@ -364,14 +350,14 @@
 	  goto lost;
 	}
 #endif /* SHELL */
-	  
+
       dp = readdir (d);
       if (dp == NULL)
 	break;
       if (REAL_DIR_ENTRY (dp)
 	  && glob_match (pat, dp->d_name, noglob_dot_filenames))
 	{
-#ifdef ALLOCA_MISSING	  
+#ifdef ALLOCA_MISSING
 	  nextlink = (struct globval *) malloc (sizeof (struct globval));
 #else
 	  nextlink = (struct globval *) alloca (sizeof (struct globval));
